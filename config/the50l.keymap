/*
 * Copyright (c) 2023 LAZYDESIGNERS
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------
            // | 7  |  8  |  9  | ESC |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  BSPC  |
            // | 4  |  5  |  6  | TAB  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |    ENTER    |
            // | 1  |  2  |  3  | SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  UP  |  SHIFT   |
            // | 0  |  .  |ENTER| CTL  |  WIN  |  ALT  |    SPACE   |    SPACE   |  LEFT | DOWN  |  RIGHT  |
            // ---------------------------------------------------------------------------------------------

            bindings = <
&kp N7  &kp N8   &kp N9   &kp ESC    &kp Q     &kp W     &kp E  &kp R        &kp T  &kp Y  &kp U        &kp I  &kp O      &kp P       &kp BSPC
&kp N4  &kp N5   &kp N6   &kp TAB    &kp A     &kp S     &kp D  &kp F        &kp G  &kp H  &kp J        &kp K  &kp L                  &kp RET
&kp N1  &kp N2   &kp N3   &kp LSHFT            &kp Z     &kp X  &kp C        &kp V  &kp B  &kp N        &kp M  &kp COMMA  &kp PERIOD  &mt RSHIFT SLASH
&kp N0  &kp DOT  &kp RET  &kp LCTRL  &kp LALT  &kp LGUI         &lt 1 SPACE                &lt 2 SPACE         &kp LEFT   &kp DOWN    &kp RIGHT
            >;
        };

        control_layer {
            // ---------------------------------------------------------------------------------------------
            // | 7  |  8  |  9  | ESC |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  BSPC  |
            // | 4  |  5  |  6  | TAB  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |    ENTER    |
            // | 1  |  2  |  3  | SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  UP  |  SHIFT   |
            // | 0  |  .  |ENTER| CTL  |  WIN  |  ALT  |    SPACE   |    SPACE   |  LEFT | DOWN  |  RIGHT  |
            // ---------------------------------------------------------------------------------------------

            bindings = <
&kp F7   &kp F8   &kp F9   &kp TILDE  &kp EXCLAMATION  &kp AT_SIGN       &kp HASH           &kp DOLLAR            &kp PERCENT            &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &kp KP_MULTIPLY  &kp KP_DIVIDE
&kp F4   &kp F5   &kp F6   &trans     &kp CARET        &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS                    &trans
&kp F1   &kp F2   &kp F3   &trans                      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH         &trans                 &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT    &kp UP_ARROW     &trans
&kp F10  &kp F11  &kp F12  &trans     &trans           &trans                               &kp SPACE                                                     &kp KP_NUMBER_0                   &kp LEFT      &kp DOWN         &kp RIGHT
            >;
        };

        layer_2 {
            bindings = <
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp K_MUTE   &kp GRAVE         &kp EXCLAMATION  &kp AT            &kp HASH           &kp DOLLAR     &kp PERCENT  &kp CARET     &kp AMPERSAND  &kp STAR  &kp MINUS      &kp EQUAL         &trans
&kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT   &kp LC(UP_ARROW)  &kp NUMBER_1     &kp NUMBER_2      &kp NUMBER_3       &kp NUMBER_4   &kp N5       &kp NUMBER_6  &kp N7         &kp N8    &kp N9                           &kp N0
&trans             &trans            &trans       &kp LC(DOWN)                       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH  &trans       &kp COLON     &kp SEMICOLON  &kp SQT   &kp LESS_THAN  &kp GREATER_THAN  &kp QMARK
&bt BT_CLR         &sys_reset        &bootloader  &trans            &trans           &trans                               &trans                                    &trans                   &trans         &trans            &trans
            >;
        };
    };
};
